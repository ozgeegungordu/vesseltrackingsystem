// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace VesselTrackingSystem.Models
{
    public partial class LimakPortContext : DbContext
    {
        public LimakPortContext()
        {
        }

        public LimakPortContext(DbContextOptions<LimakPortContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Ports> Ports { get; set; }
        public virtual DbSet<ServiceRouteLocations> ServiceRouteLocations { get; set; }
        public virtual DbSet<ServiceRoutes> ServiceRoutes { get; set; }
        public virtual DbSet<ServiceVessels> ServiceVessels { get; set; }
        public virtual DbSet<Services> Services { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<VesselLocations> VesselLocations { get; set; }
        public virtual DbSet<Vessels> Vessels { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Ports>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Code).HasMaxLength(5);

                entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasMaxLength(16);

                entity.Property(e => e.IsActive)
                    .HasColumnName("isActive")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Latitude).HasColumnType("decimal(18, 15)");

                entity.Property(e => e.Longitude).HasColumnType("decimal(18, 15)");

                entity.Property(e => e.ModifiedBy).HasMaxLength(16);

                entity.Property(e => e.Name).HasMaxLength(64);
            });

            modelBuilder.Entity<ServiceRouteLocations>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasMaxLength(16);

                entity.Property(e => e.IsActive)
                    .HasColumnName("isActive")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Latitude).HasColumnType("decimal(18, 15)");

                entity.Property(e => e.Longitude).HasColumnType("decimal(18, 15)");

                entity.Property(e => e.ModifiedBy).HasMaxLength(16);

                entity.Property(e => e.ServiceId).HasColumnName("ServiceID");
            });

            modelBuilder.Entity<ServiceRoutes>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasMaxLength(16);

                entity.Property(e => e.IsActive)
                    .HasColumnName("isActive")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ModifiedBy).HasMaxLength(16);

                entity.Property(e => e.PortId).HasColumnName("PortID");

                entity.Property(e => e.ServiceId).HasColumnName("ServiceID");
            });

            modelBuilder.Entity<ServiceVessels>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasMaxLength(16);

                entity.Property(e => e.IsActive)
                    .HasColumnName("isActive")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ModifiedBy).HasMaxLength(16);

                entity.Property(e => e.ServiceId).HasColumnName("ServiceID");

                entity.Property(e => e.VesselId).HasColumnName("VesselID");
            });

            modelBuilder.Entity<Services>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Code).HasMaxLength(20);

                entity.Property(e => e.ColorCode)
                    .HasMaxLength(7)
                    .HasDefaultValueSql("('#0f0f0f')");

                entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasMaxLength(16);

                entity.Property(e => e.IsActive)
                    .HasColumnName("isActive")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.ModifiedBy).HasMaxLength(16);

                entity.Property(e => e.Name).HasMaxLength(256);

                entity.Property(e => e.Organization).HasMaxLength(256);
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.Property(e => e.FullName).HasMaxLength(100);

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.Username).HasMaxLength(50);
            });

            modelBuilder.Entity<VesselLocations>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasColumnName("isActive")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Latitude).HasColumnType("decimal(18, 15)");

                entity.Property(e => e.Longitude).HasColumnType("decimal(18, 15)");

                entity.Property(e => e.ModifiedBy).HasMaxLength(16);

                entity.Property(e => e.VesselId).HasColumnName("VesselID");

                entity.HasOne(d => d.Vessel)
                    .WithMany(p => p.VesselLocations)
                    .HasForeignKey(d => d.VesselId)
                    .HasConstraintName("FK__VesselLoc__Vesse__1F846F7F");
            });

            modelBuilder.Entity<Vessels>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.CreatedAt).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CreatedBy).HasMaxLength(16);

                entity.Property(e => e.Imo)
                    .HasMaxLength(7)
                    .HasColumnName("IMO");

                entity.Property(e => e.IsActive)
                    .HasColumnName("isActive")
                    .HasDefaultValueSql("((0))");

                entity.Property(e => e.Mmsi)
                    .HasMaxLength(9)
                    .HasColumnName("MMSI");

                entity.Property(e => e.ModifiedBy).HasMaxLength(16);

                entity.Property(e => e.Name).HasMaxLength(256);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}